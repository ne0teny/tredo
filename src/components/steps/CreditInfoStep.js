import React from 'react';
import { useForm as useReactHookForm } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import {
  Box,
  TextField,
  Typography,
  Grid,
  Alert,
  MenuItem,
  FormControlLabel,
  Checkbox,
  Paper,
  InputAdornment,
} from '@mui/material';
import { AttachMoney, Schedule, Description, CreditCard } from '@mui/icons-material';
import { useForm } from '../../context/FormContext';
import { creditInfoSchema } from '../../utils/validationSchemas';
import AnimatedWrapper from '../AnimatedWrapper';

const CreditInfoStep = () => {
  const { formData, updateFormData } = useForm();
  const {
    register,
    handleSubmit,
    formState: { errors, isValid },
    watch,
    setValue,
  } = useReactHookForm({
    resolver: yupResolver(creditInfoSchema),
    defaultValues: formData.creditInfo,
    mode: 'onChange',
  });

  const watchedValues = watch();
  const amount = watch('amount');
  const term = watch('term');
  const hasOtherCredits = watch('hasOtherCredits');

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  React.useEffect(() => {
    updateFormData('creditInfo', watchedValues);
  }, [watchedValues, updateFormData]);

  // –†–∞—Å—á–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ–≥–æ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
  const calculateMonthlyPayment = () => {
    if (!amount || !term) return 0;
    const monthlyRate = 0.15 / 12; // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 15% –≥–æ–¥–æ–≤—ã—Ö
    const monthlyPayment = (amount * monthlyRate * Math.pow(1 + monthlyRate, term)) / 
                          (Math.pow(1 + monthlyRate, term) - 1);
    return Math.round(monthlyPayment);
  };

  const creditPurposes = [
    '–ü–æ–∫—É–ø–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è',
    '–ü–æ–∫—É–ø–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏',
    '–†–µ–º–æ–Ω—Ç –∏ –æ–±—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ',
    '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
    '–õ–µ—á–µ–Ω–∏–µ',
    '–†–∞–∑–≤–∏—Ç–∏–µ –±–∏–∑–Ω–µ—Å–∞',
    '–ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤',
    '–õ–∏—á–Ω—ã–µ –Ω—É–∂–¥—ã',
    '–î—Ä—É–≥–æ–µ'
  ];

  return (
    <AnimatedWrapper>
      <Box>
        <Typography variant="h5" sx={{ mb: 3, color: 'primary.main', fontWeight: 600 }}>
          –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫—Ä–µ–¥–∏—Ç–∞
        </Typography>
        
        <Alert 
          severity="info" 
          sx={{ 
            mb: 4,
            borderRadius: 2,
            '& .MuiAlert-icon': { fontSize: '1.25rem' },
          }}
        >
          –£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫—Ä–µ–¥–∏—Ç–∞. –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –±—É–¥—É—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø–æ—Å–ª–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏.
        </Alert>

        <form onSubmit={handleSubmit(() => {})}>
          <Grid container spacing={3}>
            <Grid item xs={12} sm={6}>
              <TextField
                {...register('amount')}
                fullWidth
                label="–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞ *"
                type="number"
                placeholder="2000000"
                inputProps={{ min: 500000, max: 100000000, step: 100000 }}
                error={!!errors.amount}
                helperText={errors.amount?.message || '–û—Ç 500,000 –¥–æ 100,000,000 —Ç–µ–Ω–≥–µ'}
                variant="outlined"
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <AttachMoney color="action" />
                    </InputAdornment>
                  ),
                  endAdornment: <InputAdornment position="end">‚Ç∏</InputAdornment>,
                }}
                sx={{
                  '& .MuiOutlinedInput-root': {
                    transition: 'all 0.3s ease',
                    '&:hover': {
                      '& .MuiOutlinedInput-notchedOutline': {
                        borderColor: 'primary.main',
                      },
                    },
                  },
                }}
              />
            </Grid>
            
            <Grid item xs={12} sm={6}>
              <TextField
                {...register('term')}
                fullWidth
                label="–°—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞ *"
                type="number"
                placeholder="36"
                inputProps={{ min: 6, max: 360 }}
                error={!!errors.term}
                helperText={errors.term?.message || '–û—Ç 6 –¥–æ 360 –º–µ—Å—è—Ü–µ–≤'}
                variant="outlined"
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <Schedule color="action" />
                    </InputAdornment>
                  ),
                  endAdornment: <InputAdornment position="end">–º–µ—Å.</InputAdornment>,
                }}
                sx={{
                  '& .MuiOutlinedInput-root': {
                    transition: 'all 0.3s ease',
                    '&:hover': {
                      '& .MuiOutlinedInput-notchedOutline': {
                        borderColor: 'primary.main',
                      },
                    },
                  },
                }}
              />
            </Grid>
            
            <Grid item xs={12}>
              <TextField
                {...register('purpose')}
                select
                fullWidth
                label="–¶–µ–ª—å –∫—Ä–µ–¥–∏—Ç–∞ *"
                error={!!errors.purpose}
                helperText={errors.purpose?.message}
                variant="outlined"
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <Description color="action" />
                    </InputAdornment>
                  ),
                }}
                sx={{
                  '& .MuiOutlinedInput-root': {
                    transition: 'all 0.3s ease',
                    '&:hover': {
                      '& .MuiOutlinedInput-notchedOutline': {
                        borderColor: 'primary.main',
                      },
                    },
                  },
                }}
              >
                {creditPurposes.map((purpose) => (
                  <MenuItem key={purpose} value={purpose}>
                    {purpose}
                  </MenuItem>
                ))}
              </TextField>
            </Grid>

            <Grid item xs={12}>
              <FormControlLabel
                control={
                  <Checkbox
                    {...register('hasOtherCredits')}
                    checked={hasOtherCredits || false}
                    onChange={(e) => setValue('hasOtherCredits', e.target.checked)}
                  />
                }
                label="–£ –º–µ–Ω—è –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤—É—é—â–∏–µ –∫—Ä–µ–¥–∏—Ç—ã"
              />
            </Grid>

            {hasOtherCredits && (
              <Grid item xs={12}>
                <TextField
                  {...register('otherCreditsInfo')}
                  fullWidth
                  label="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥—Ä—É–≥–∏—Ö –∫—Ä–µ–¥–∏—Ç–∞—Ö *"
                  placeholder="–£–∫–∞–∂–∏—Ç–µ –±–∞–Ω–∫, —Å—É–º–º–∞ –æ—Å—Ç–∞—Ç–∫–∞, –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂"
                  multiline
                  rows={3}
                  error={!!errors.otherCreditsInfo}
                  helperText={errors.otherCreditsInfo?.message}
                  variant="outlined"
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start" sx={{ alignSelf: 'flex-start', mt: 1 }}>
                        <CreditCard color="action" />
                      </InputAdornment>
                    ),
                  }}
                  sx={{
                    '& .MuiOutlinedInput-root': {
                      transition: 'all 0.3s ease',
                      '&:hover': {
                        '& .MuiOutlinedInput-notchedOutline': {
                          borderColor: 'primary.main',
                        },
                      },
                    },
                  }}
                />
              </Grid>
            )}
          </Grid>

          {/* –†–∞—Å—á–µ—Ç –ø–ª–∞—Ç–µ–∂–∞ */}
          {amount && term && (
            <Paper 
              sx={{ 
                mt: 4, 
                p: 3, 
                bgcolor: 'primary.light', 
                borderRadius: 2,
                border: '1px solid',
                borderColor: 'primary.main',
              }}
            >
              <Typography variant="body1" sx={{ mb: 2, fontWeight: 600, color: 'primary.dark' }}>
                üí∞ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç
              </Typography>
              <Grid container spacing={2}>
                <Grid item xs={6}>
                  <Typography variant="body2" color="text.secondary">
                    –°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞:
                  </Typography>
                  <Typography variant="h6" sx={{ fontWeight: 600 }}>
                    {Number(amount).toLocaleString()} ‚Ç∏
                  </Typography>
                </Grid>
                <Grid item xs={6}>
                  <Typography variant="body2" color="text.secondary">
                    –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂*:
                  </Typography>
                  <Typography variant="h6" sx={{ fontWeight: 600 }}>
                    ‚âà {calculateMonthlyPayment().toLocaleString()} ‚Ç∏
                  </Typography>
                </Grid>
              </Grid>
              <Typography variant="caption" color="text.secondary" sx={{ mt: 2, display: 'block' }}>
                * –†–∞—Å—á–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω—ã–π –ø—Ä–∏ —Å—Ç–∞–≤–∫–µ 15% –≥–æ–¥–æ–≤—ã—Ö. –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –±–∞–Ω–∫–æ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ.
              </Typography>
            </Paper>
          )}

          {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <Paper 
            sx={{ 
              mt: 4, 
              p: 3, 
              bgcolor: 'grey.50', 
              borderRadius: 2,
              border: '1px solid',
              borderColor: 'grey.200',
            }}
          >
            <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
              <strong>–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</strong>
            </Typography>
            <Typography variant="body2" color="text.secondary">
              ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞ ‚Äî 500,000 —Ç–µ–Ω–≥–µ<br/>
              ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏—è ‚Äî –¥–æ 30 –ª–µ—Ç<br/>
              ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å—É–º–º—ã, —Å—Ä–æ–∫–∞ –∏ –≤–∞—à–µ–π –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏<br/>
              ‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ –¥–æ—Å—Ä–æ—á–Ω–æ–µ –ø–æ–≥–∞—à–µ–Ω–∏–µ –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–π
            </Typography>
          </Paper>

          {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º—ã */}
          <Box sx={{ mt: 3 }}>
            {isValid ? (
              <Alert 
                severity="success"
                sx={{ 
                  borderRadius: 2,
                  '& .MuiAlert-icon': { fontSize: '1.25rem' },
                }}
              >
                ‚úì –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫—Ä–µ–¥–∏—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
              </Alert>
            ) : (
              <Alert 
                severity="warning"
                sx={{ 
                  borderRadius: 2,
                  '& .MuiAlert-icon': { fontSize: '1.25rem' },
                }}
              >
                –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
              </Alert>
            )}
          </Box>
        </form>
      </Box>
    </AnimatedWrapper>
  );
};

export default CreditInfoStep; 